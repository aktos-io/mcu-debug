ifneq (, $(shell which $(GCC_Path)arm-none-eabi-gdb))
GDB := $(GCC_Path)arm-none-eabi-gdb
else
ifneq (, $(shell which $(GCC_Path)gdb-multiarch))
GDB := $(GCC_Path)gdb-multiarch
else
$(error "No GDB executable found")
endif
endif

ifeq (,$(GDB_Addr))
GDB_Addr := localhost:4242
endif

cmd-debugger:
	@if [ "$(BUILD_TARGET)" != "Debug" ]; then \
		echo ----------------------------------------------------; \
		echo "Not in 'Debug' mode! Things might not act as you expected."; \
		echo 'Set "Debug" in your Target file'; \
		echo ----------------------------------------------------; \
		sleep 5; \
	fi
	$(MAKE) all
	@echo "------------------------------------------------------------------"
	@echo "Start GDB server with 'make start-gdb-server' on another terminal."
	@echo "------------------------------------------------------------------"
	@sed "s/TARGET_ADDRESS/$(GDB_Addr)/" $(dir)/gdb-init > /tmp/gdbinit
	$(GDB) -x /tmp/gdbinit


help-cmd-debugger:
	@clear
	@echo
	@echo "Important commands"
	@echo "------------------"
	@# show only lines beginning with double stars ('**')
	@cat $(dir)/cmd/gdb-cheatsheet.md | grep -e "^\*\*.*"

	@echo
	@echo "Examples"
	@echo "-----------------"
	@# show important snippets, like:
	@#
	@#     ...this is an example:
	@#         do that
	@#         do this
	@# (note: $$ is for escaping $ in Makefile)
	@cat $(dir)/cmd/gdb-cheatsheet.md | sed -n '/^\.\.\./,/^$$/p'

breakpoint_file := ./breakpoints.txt
DEBUG_ON := true
DEBUG_OFF := false
gen-breakpoints:
	@# $(App) variable is either empty or a valid path with a slash at the end
	@echo "# Generated by mcu-debug/gen-breakpoints" > $(breakpoint_file)
	@echo "# For App: $(App)"						 >> $(breakpoint_file)
	@echo "# --------------------------------------" >> $(breakpoint_file)
	@grep --exclude='*' \
		--exclude-dir='.git' \
		--include='*.c' \
		--include='*.h' \
		"^[^/]*.*[^/]//\s*debugger.*" $(App)* -HnosR \
		| sed -r \
 		's|^([^:]+):([^:]+):[^(//)]*//\s*debugger:?\s*(.*)|\1\t\2\t\3|' \
 		| while read -r file line commands; do \
 			$(DEBUG_OFF) && printf 'file: %s, line: %i, commands: %s\n' "$$file" $$line "$$commands"; \
			echo "break $${file}:$${line}" >> $(breakpoint_file); \
			if [ -n "$$commands" ]; then \
				echo "commands" >> $(breakpoint_file); \
				echo "silent" 				>> $(breakpoint_file); \
				printf '%s\n' "$$commands"	>> $(breakpoint_file); \
				echo "continue"				>> $(breakpoint_file); \
				echo "end"					>> $(breakpoint_file); \
			fi; \
		done; 
	@echo "Breakpoints written to: $(breakpoint_file)"
